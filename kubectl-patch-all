#!/usr/bin/env ruby
# use kubectl to patch all matching items

# when we run in parallel we capture the command too so everything prints as one
def sh(command, capture_command: false)
  puts command unless capture_command
  result = `#{command}`
  abort "#{command}\n#{result}" unless $?.success?
  capture_command ? "#{command}\n#{result}" : result
end

def kubectl(command, **kwargs)
  sh "kubectl #{command}", **kwargs
end

def extract_option(*formats, required:, has_value: true)
  formats.each do |option|
    ARGV.each_with_index do |arg, i|
      if arg == option # ["-p", "foo"]
        ARGV.delete_at i
        return has_value ? ARGV.delete_at(i) : true
      end
      if (value = arg[/^#{option}=(.*)/, 1]) # ["-p=foo"]
        ARGV.delete_at i
        return value
      end
    end
  end
  abort "No #{formats.join(" or ")} option given" if required
end

def discard_option(*formats, **kwargs)
  extract_option *formats, required: false, **kwargs
end

def in_parallel(items, parallel:, &block)
  return items.each(&block) if parallel == 0

  threads = Array.new(parallel).map do
    Thread.new do
      while (item = items.shift)
        yield item
      end
    end
  end

  # wait for all threads to finish and re-raise exception if they happen
  loop do
    break if threads.all? { |t| t.join(0) }
    sleep 0.1
  end
end

require 'json'
require 'shellwords'

abort "Need some arguments" if ARGV.size == 0
abort "First argument must be the resource (e.g. pods)" if (resource = ARGV.shift).start_with?("-")
patch = extract_option "-p", "--patch", required: true
type = extract_option "-t", "--type", required: true
parallel = Integer(extract_option("--parallel", required: false) || "0")

# find items and confirm
list = JSON.parse(kubectl("get #{resource} #{ARGV.shelljoin} -o json")).fetch("items")
abort "No resources found" if list.size == 0

# TODO: this is not supported atm and results in multiple patches to the same resource
passed = (ARGV & list.map { |r| r.dig("metadata", "name") })
abort "Names were given as argument, use patch directly: #{passed.join(", ")}" if passed.any?

puts "Patch #{list.size} resources ? (y/n)"
abort unless $stdin.gets.strip == "y"

# remove options that patch does not support
discard_option "-l", "--selector"
discard_option "--field-selector"
discard_option "-n", "--namespace"
discard_option "-A", "--all-namespaces", has_value: false

# patch items (also supporting resource being "deployments,statefulsets")
mutex = Mutex.new
in_parallel(list, parallel: parallel) do |item|
  selector = "#{item.fetch("kind")} #{item.dig("metadata", "name")} -n #{item.dig("metadata", "namespace")}"
  result = kubectl(
    "patch #{selector} --patch #{patch.shellescape} --type #{type.shellescape} #{ARGV.shelljoin}",
    capture_command: (parallel != 0)
  )
  mutex.synchronize { puts result }
end
